// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  HOST
  ADMIN
}

enum ServiceType {
  PHOTOGRAPHY
  VIDEOGRAPHY
  DRONE
  STUDIO
}

enum PortfolioCategory {
  WEDDING
  CORPORATE
  BIRTHDAY
  AERIAL
  OTHER
}

enum PricingType {
  HOURLY
  DAILY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DECLINED
  CANCELLED
  COMPLETED
}

enum PayoutStatus {
  PENDING
  PAID
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())

  // Relations
  hostProfile     HostProfile?
  customerBookings Booking[]    @relation("CustomerBookings")
  hostBookings    Booking[]     @relation("HostBookings")
  reviews         Review[]
  payouts         Payout[]

  @@map("users")
}

model HostProfile {
  id             String      @id @default(cuid())
  userId         String      @unique
  bio            String?
  yearsExperience Int?
  services       ServiceType[]
  equipment      String[]
  city           String?
  ratingAvg      Float       @default(0)
  ratingCount    Int         @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolioItems PortfolioItem[]
  pricing        Pricing[]
  availabilitySlots AvailabilitySlot[]
  listings       Listing[]
  payouts        Payout[]

  @@map("host_profiles")
}

model PortfolioItem {
  id       String           @id @default(cuid())
  hostId   String
  url      String
  caption  String?
  category PortfolioCategory
  createdAt DateTime        @default(now())

  // Relations
  host     HostProfile     @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model Pricing {
  id         String   @id @default(cuid())
  hostId     String
  hourlyRate Float?
  dailyRate  Float?
  packages   Json?    // Array of {name, desc, price}
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  host       HostProfile @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("pricing")
}

model AvailabilitySlot {
  id        String   @id @default(cuid())
  hostId    String
  start     DateTime
  end       DateTime
  isBlocked Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  host      HostProfile @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("availability_slots")
}

model Listing {
  id          String   @id @default(cuid())
  hostId      String
  title       String
  description String?
  baseCity    String?
  tags        String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  host        HostProfile @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@map("listings")
}

model Booking {
  id          String        @id @default(cuid())
  listingId   String
  customerId  String
  hostId      String
  start       DateTime
  end         DateTime
  pricingType PricingType
  hours       Int?
  subtotal    Float
  fees        Float
  tax         Float
  total       Float
  status      BookingStatus @default(PENDING)
  paymentRef  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  listing     Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  customer    User          @relation("CustomerBookings", fields: [customerId], references: [id], onDelete: Cascade)
  host        User          @relation("HostBookings", fields: [hostId], references: [id], onDelete: Cascade)
  review      Review?

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  rating    Int      // 1-5
  comment   String?
  photos    String[] // Array of photo URLs
  createdAt DateTime @default(now())

  // Relations
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Payout {
  id          String       @id @default(cuid())
  hostId      String
  amount      Float
  status      PayoutStatus @default(PENDING)
  requestedAt DateTime     @default(now())
  paidAt      DateTime?

  // Relations
  host        User         @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@map("payouts")
}
